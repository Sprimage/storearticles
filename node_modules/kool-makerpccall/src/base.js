'use strict';

module.exports = (XMLHttpRequest) => {
  let id = 0;
  return (rpc, method, params = []) => {
    let abort;
    const retval = new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      abort = () => xhr.abort();
      xhr.addEventListener('error', () => reject(new Error('XMLHttpRequest error')));
      xhr.addEventListener('readystatechange', () => {
        try {
          if (xhr.readyState === 4) {
            const {
              result,
              error
            } = JSON.parse(xhr.responseText);
            if (error) {
              const rejectWith = new Error(error.message);
              rejectWith.code = error.code;
              reject(rejectWith);
            }
            resolve(result);
          }
        } catch (e) {
          reject(e);
        }
      });
      xhr.open('POST', rpc);
      xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
      try {
        xhr.send(JSON.stringify({
          jsonrpc: '2.0',
          id: id++,
          method,
          params
        }));
      } catch (e) {
        reject(e);
      }
    });
    retval.abort = abort;
    return retval;
  };
};
